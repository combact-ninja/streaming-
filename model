import numpy as np
np.random.seed(1337)  # for reproducibility

from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.preprocessing import MinMaxScaler
from dbn.tensorflow import SupervisedDBNRegression as DBN

from keras.models import Sequential
from keras.layers import Dense, LSTM, Bidirectional

# Loading dataset
boston = load_boston()
X, Y = boston.data, boston.target

# Splitting data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=1337)

# Data scaling
min_max_scaler = MinMaxScaler()
X_train = min_max_scaler.fit_transform(X_train)
X_test = min_max_scaler.transform(X_test)

# Training DBN
regressor = DBN(hidden_layers_structure=[100],
                                    learning_rate_rbm=0.01,
                                    learning_rate=0.01,
                                    n_epochs_rbm=20,
                                    n_iter_backprop=200,
                                    batch_size=16,
                                    activation_function='relu')
regressor.fit(X_train, Y_train)

# Transform the training data using DBN
X_train_transformed = regressor.transform(X_train)
X_test_transformed = regressor.transform(X_test)

# Reshape for LSTM input (samples, timesteps, features)
X_train_lstm = X_train_transformed.reshape(X_train_transformed.shape[0], 1, X_train_transformed.shape[1])
X_test_lstm = X_test_transformed.reshape(X_test_transformed.shape[0], 1, X_test_transformed.shape[1])

# Building BiLSTM model
model = Sequential()
model.add(Bidirectional(LSTM(50, return_sequences=True), input_shape=(X_train_lstm.shape[1], X_train_lstm.shape[2])))
model.add(Bidirectional(LSTM(50)))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

# Training BiLSTM
model.fit(X_train_lstm, Y_train, epochs=100, batch_size=16, validation_data=(X_test_lstm, Y_test), verbose=2, shuffle=False)

# Prediction
Y_pred = model.predict(X_test_lstm)

# Evaluation
print('Done.\nR-squared: %f\nMSE: %f' % (r2_score(Y_test, Y_pred), mean_squared_error(Y_test, Y_pred)))
